package Tiny;

import java_cup.runtime.*;
import ast.*;
//import otros.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Scanner(System.in,sf),sf);
		else 
			parser_obj=new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf);

		parser_obj.parse();

		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
		ast.Util.imprimirAST(root);
		TablaSimbolos ts = parser_obj.action_obj.getTablaSimbolos();
		ts.ImprimirClaves();

//		Tiny.Generador.setTablaSimbolos(ts);
//		Tiny.Generador.generarCodigoObjeto(root);

	}

:};

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	private TablaSimbolos ts=new TablaSimbolos();
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
	public TablaSimbolos getTablaSimbolos(){
		return ts;
	}
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal SEMI;
/*+++++++++++++++++++++++*/
terminal LE; 		//MENOR O IGUAL QUE
terminal GE; 		//MAYOR O IGUAL QUE
terminal GT; 		//MAYOR QUE
terminal NE; 		//NO IGUAL QUE (DIFERENTE)
terminal MAINB;		//TOKEN MAINBEGIN
terminal AND;		//"Y" LOGICO
terminal OR;		//"O" LOGICO	
terminal INT;		//tipo de variable declarada	
terminal LCOR;		//corchete izquierdo
terminal RCOR;		//corchete derecho
terminal COMA;		//simbolo coma ","
terminal ENDVAR;	//fin de bloque declaracion
terminal WHILE;		//ciclo while
terminal ENDW;		//fin del ciclo while
terminal FOR;		//ciclo for
terminal ENDF;		//fin del ciclo for
/*+++++++++++++++++++++++*/

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
/*+++++++++++++++++++++++*/
//non terminal NodoBase decl_var;
non terminal NodoBase prog_blq;
non terminal NodoBase decl_seq;
non terminal NodoBase decl_stmt;
non terminal NodoBase while_stmt;
non terminal NodoBase for_stmt;
/*+++++++++++++++++++++++*/

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
/*+++++++++++++++++++++++*/
precedence left OR;
precedence left AND;
/*+++++++++++++++++++++++*/

/* REGLAS GRAMATICALES */
program     ::= MAINB prog_blq:s END{: if(debug) System.out.println("\t regla 1a"); 
					ast = s;
					:}
		;
prog_blq ::= INT decl_seq:ds SEMI ENDVAR stmt_seq:stm {:
			
			NodoBase hijoActual = ds;
			while(hijoActual.TieneHermano()){
				hijoActual = hijoActual.getHermanoDerecha();
			}
			hijoActual.setHermanoDerecha(stm);
			RESULT=ds;
		:};
decl_seq ::= decl_seq:ini COMA decl_stmt:sent {:
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
		:}
		| decl_stmt:sent {:
				RESULT=sent;				
		:};

decl_stmt ::= ID:variable 
			{:
			if(debug) System.out.println("\t Creando nodo declaracion... para variable");
				NodoDeclaracion nodo = new NodoDeclaracion(0,variable.toString());
				ts.InsertarSimbolo(nodo,-1);
				RESULT = nodo;
	:}
	| ID:variable LCOR NUM:valor RCOR {:
			if(debug) System.out.println("\t Creando nodo declaracion... para vector");
				NodoDeclaracion nodo = new NodoDeclaracion(Integer.parseInt(valor.toString()),variable.toString());
				ts.InsertarSimbolo(nodo,-1);
				RESULT = nodo;
	:}
;
stmt_seq    ::= stmt_seq:ini  stmt:sent SEMI 	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	SEMI {: if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3c"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(debug) System.out.println("\t regla 3d"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(debug) System.out.println("\t regla 3e"); 
					RESULT=sesc;
					:}
	    | while_stmt:swhi {:
				System.out.println("\tnodo while...");
				RESULT=swhi;
		:}
	    | for_stmt:sfor {:
				System.out.println("\tnodo for...");
				RESULT=sfor;
				
		:}
            | error	{: if(debug) System.out.println("\t regla 3g"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;
if_stmt     ::= IF exp:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;
while_stmt ::= WHILE LPAREN exp:prueba RPAREN  stmt_seq:cuerpo ENDW {:
				System.out.println("\treconociendo while....");
				RESULT = new NodoWhile(prueba,cuerpo);
		:};
for_stmt ::= FOR LPAREN assign_stmt:asignacion COMA exp:prueba COMA assign_stmt:expresion RPAREN stmt_seq:cuerpo ENDF 
		{:
				System.out.println("\treconociendo for....");
				RESULT = new NodoFor(asignacion,prueba,expresion,cuerpo);
		:};
repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(debug) System.out.println("\t regla 5a"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

assign_stmt ::= ID:variable 	{: if(debug) System.out.println("\t regla 6 parte del medio"); 
				/*lineanum=1000; //Pasar/Obtener la linea correcta por el Simbolo
				String nombre = variable.getName();*/
				:}
			ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 6 parte final");
					if(variable!=null)
					RESULT = new NodoAsignacion(variable.toString(),ex);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0001");
					}
					:}
		;

read_stmt   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7a"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(debug) System.out.println("\t regla 8a"); 
					RESULT= new NodoEscribir(ex);
					:}
		;
exp         ::= exp:exI AND exp:exD 	{: if(debug) System.out.println("\t regla 8.5a"); 
						RESULT = new NodoOperacion(exI,tipoOp.ylogico,exD);
					:}
		| exp:exI OR exp:exD 	{: if(debug) System.out.println("\t regla 8.5b"); 
						RESULT = new NodoOperacion(exI,tipoOp.ologico,exD);
					:}
		| simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 9a"); 
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:} 
		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 9b"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:exI GT simple_exp:exD	{: if(debug) System.out.println("\t regla 9c"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
		| simple_exp:exI LE simple_exp:exD	{: if(debug) System.out.println("\t regla 9d"); 
							RESULT = new NodoOperacion(exI,tipoOp.menorIgual,exD);
							:}
		| simple_exp:exI GE simple_exp:exD	{: if(debug) System.out.println("\t regla 9e"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayorIgual,exD);
							:}
		| simple_exp:exI NE simple_exp:exD	{: if(debug) System.out.println("\t regla 9f"); 
							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 9i"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 10a"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 10b"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 10c"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 11a"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 11b"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(debug) System.out.println("\t regla 11c"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 12a"); 
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor.toString()));					
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c"); 
					if(variable!=null){
						System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
						RESULT= new NodoIdentificador(variable.toString());		
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;


